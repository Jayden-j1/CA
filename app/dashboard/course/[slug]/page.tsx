// app/dashboard/course/[slug]/page.tsx
//
// Purpose
// -------
// Server-side redirector from the dynamic route
//   /dashboard/course/[slug]
// to your existing page that already renders the course UI:
//   /dashboard/course?slug=<slug>
//
// Why server-side?
// ----------------
// - Next.js 15's typed build expects `params` (and often `searchParams`) to be Promises.
// - Using a *server component* + `redirect()` avoids client flashes and
//   satisfies the typed contract generated by Next for this route.
// - Keeps your large Course UI centralized in app/dashboard/course/page.tsx
//   which already reads ?slug=…
//
// Pillars
// -------
// ✅ Simplicity: one place renders the UI.
// ✅ Robustness: we preserve existing query flags (e.g., preview/success).
// ✅ Efficiency: zero client JS here; immediate server redirect.
// ✅ Ease of management: no duplicated course components.
// ✅ Security: no additional data exposure; just a redirect.

import { redirect } from "next/navigation";

// Small helper to convert Next.js searchParams (record of string | string[])
// into URLSearchParams safely.
function toURLSearchParams(
  obj: Record<string, string | string[] | undefined> | undefined
) {
  const qs = new URLSearchParams();
  if (!obj) return qs;

  for (const [key, val] of Object.entries(obj)) {
    if (Array.isArray(val)) {
      // Multiple values for the same key
      for (const v of val) qs.append(key, v);
    } else if (typeof val === "string") {
      qs.set(key, val);
    }
  }
  return qs;
}

// ⚠️ IMPORTANT: Next.js 15's generated types for dynamic pages often expect
// promisified props. We accept Promises and `await` them immediately.
export default async function Page(props: {
  params: Promise<{ slug: string }>;
  searchParams?: Promise<Record<string, string | string[] | undefined>>;
}) {
  // 1) Unwrap the promises as required by the typed contract
  const { slug } = await props.params;
  const rawSearch = props.searchParams
    ? await props.searchParams
    : undefined;

  // 2) Build the query string: preserve existing flags and inject/override `slug`
  const qs = toURLSearchParams(rawSearch);
  qs.set("slug", slug);

  // 3) Redirect to the canonical course page that contains your full UI
  redirect(`/dashboard/course?${qs.toString()}`);
}
