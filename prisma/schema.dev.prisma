// prisma/schema.dev.prisma
//
// SQLite for local development. The models are identical to production;
// only the datasource provider changes. Keep models in sync with schema.prod.prisma.

datasource db {
  provider = "sqlite"             //  local dev uses SQLite
  url      = env("DATABASE_URL")  // e.g. "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------
// User model (used by NextAuth)
// --------------------------------
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?

  // For CredentialsProvider (bcrypt-hashed)
  password      String?

  // Roles: "USER" | "BUSINESS_OWNER" | "ADMIN"
  role          String     @default("USER")

  // If the user is part of a business (null if individual)
  businessId    String?
  business      Business?  @relation(fields: [businessId], references: [id])

  // Inverse of Business.owner (1:1)
  ownedBusiness Business?  @relation("BusinessOwner")

  // Payments made by this user
  payments      Payment[]

  // NextAuth relations
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// --------------------------------
// Business model
// --------------------------------
model Business {
  id        String   @id @default(cuid())
  name      String
  domain    String   @unique           // used to validate staff emails

  // One user owns one business (1:1)
  ownerId   String   @unique
  owner     User     @relation("BusinessOwner", fields: [ownerId], references: [id])

  // All users (owner + staff) linked via User.businessId
  users     User[]

  createdAt DateTime @default(now())
}

// --------------------------------
// Payment model
// --------------------------------
model Payment {
  id          String   @id @default(cuid())

  // Who paid
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  // Stripe info
  amount      Float
  currency    String
  stripeId    String   // Stripe Checkout Session id
  description String

  createdAt   DateTime @default(now())
}

// --------------------------------
// NextAuth models (as required by Prisma Adapter)
// --------------------------------
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
