// prisma/schema.prisma

datasource db {
  provider = "sqlite" // dev (later switch to "postgresql" for production)
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------
// User model (used by NextAuth)
// --------------------------------
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  //  For password-based login (optional if user signs in via OAuth)
  password String?

  //  Role determines what they can do
  role String @default("USER") // "USER" | "BUSINESS_OWNER" | "ADMIN"

  //  If this user is staff in a business
  businessId String?
  business   Business? @relation(fields: [businessId], references: [id])

  //  If this user is the owner of a business (1:1 relation)
  ownedBusiness Business? @relation("BusinessOwner")

  //  Payments this user has made
  payments Payment[]

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------------------------
// Business model
// --------------------------------
model Business {
  id     String @id @default(cuid())
  name   String
  domain String @unique // used to validate staff emails

  //  One-to-one relation with a business owner
  ownerId String @unique
  owner   User   @relation("BusinessOwner", fields: [ownerId], references: [id])

  //  Staff + owner linked via User.businessId
  users User[]

  createdAt DateTime @default(now())
}

// --------------------------------
// Payment model
// --------------------------------
model Payment {
  id String @id @default(cuid())

  //  Who made the payment
  userId String
  user   User   @relation(fields: [userId], references: [id])

  //  Stripe payment details
  amount      Float
  currency    String
  stripeId    String // Stripe checkout session ID
  description String

  createdAt DateTime @default(now())
}

// --------------------------------
// NextAuth models (required)
// --------------------------------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
