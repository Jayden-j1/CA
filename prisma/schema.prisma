// prisma/schema.prisma
//
// IMPORTANT
// ---------
// Your Business model includes `emailDomain String?`.
// If your DB is missing this column, run a migration (commands at bottom).

generator client {
  provider   = "prisma-client-js"
  engineType = "dataproxy"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  emailVerified         DateTime?
  image                 String?

  hasPaid               Boolean   @default(false)
  packageType           String?   @default("individual")
  hashedPassword        String?   @map("password")
  role                  String    @default("USER")
  businessId            String?
  isActive              Boolean   @default(true)
  mustChangePassword    Boolean   @default(false)

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  accounts              Account[]
  ownedBusiness         Business? @relation("BusinessOwner")
  payments              Payment[]
  sessions              Session[]
  business              Business? @relation(fields: [businessId], references: [id], onDelete: SetNull)
  passwordResetTokens   PasswordResetToken[]

  courseProgress        UserCourseProgress[]
  moduleProgress        UserModuleProgress[]
}

model Business {
  id          String   @id @default(cuid())
  name        String

  // INTERNAL unique handle (slug + suffix), used by the app.
  domain      String   @unique

  // Human-visible org email domain (e.g. "example.com")
  emailDomain String?

  ownerId     String   @unique
  createdAt   DateTime @default(now())

  owner       User     @relation("BusinessOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  users       User[]

  @@index([domain])
  @@index([emailDomain])
}

model Payment {
  id          String         @id @default(cuid())
  userId      String
  amount      Float
  currency    String
  stripeId    String         @unique
  description String
  createdAt   DateTime       @default(now())
  purpose     PaymentPurpose @default(PACKAGE)

  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

enum PaymentPurpose {
  PACKAGE
  STAFF_SEAT
}

model Course {
  id          String         @id @default(cuid())
  slug        String         @unique
  title       String
  summary     String?
  coverImage  String?
  isPublished Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  modules     CourseModule[]
  progress    UserCourseProgress[]

  @@index([isPublished, updatedAt])
}

model CourseModule {
  id              String     @id @default(cuid())
  courseId        String
  order           Int
  title           String
  description     String?
  videoUrl        String?
  durationSeconds Int?
  isPublished     Boolean    @default(false)
  content         Json?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  course          Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quiz            Quiz?
  userProgress    UserModuleProgress[]

  @@index([courseId, order])
  @@unique([courseId, order])
  @@index([courseId, isPublished, order])
}

model Quiz {
  id           String        @id @default(cuid())
  moduleId     String        @unique
  title        String?
  questions    Json
  passingScore Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  module       CourseModule  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model UserCourseProgress {
  id                 String     @id @default(cuid())
  userId             String
  courseId           String
  completedModuleIds String[]
  lastModuleId       String?
  percent            Int?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId, updatedAt])
}

model UserModuleProgress {
  id         String       @id @default(cuid())
  userId     String
  moduleId   String
  completed  Boolean      @default(false)
  quizScore  Int?
  updatedAt  DateTime     @updatedAt
  createdAt  DateTime     @default(now())

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  module     CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@index([moduleId])
  @@index([userId, updatedAt])
}

/// Tracks per-user, per-course module completion.
/// One row per (userId, courseId). `completedModuleIds` is stored as JSON array.
/// This keeps it DB-agnostic (works across Postgres/MySQL/SQLite).
model CourseProgress {
  id                  String   @id @default(cuid())
  userId              String
  courseId            String
  completedModuleIds  Json     /// e.g., ["moduleId1","moduleId2"]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([userId, courseId])
}
