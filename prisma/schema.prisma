// prisma/schema.prisma
//
// Purpose:
// - Single source of truth for DB models.
// - Soft delete support via `User.isActive` (Boolean).
// - Keeps Payment history intact while letting you hide deactivated staff in UI.
//
// After editing this file, run:
//   npx prisma migrate dev --name add_user_isActive
//   npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?

  // Bcrypt-hashed password (NOT plaintext)
  hashedPassword String?   @map("password")

  // Role: USER | BUSINESS_OWNER | ADMIN
  role           String    @default("USER")

  businessId     String?

  // âœ… NEW: Soft-delete flag. Active users show in UI. Inactive users remain for audit.
  isActive       Boolean   @default(true)

  // Timestamps
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  accounts       Account[]
  ownedBusiness  Business? @relation("BusinessOwner")
  payments       Payment[]
  sessions       Session[]
  business       Business? @relation(fields: [businessId], references: [id])
}

model Business {
  id        String   @id @default(cuid())
  name      String
  domain    String   @unique
  ownerId   String   @unique
  createdAt DateTime @default(now())
  owner     User     @relation("BusinessOwner", fields: [ownerId], references: [id])
  users     User[]
}

model Payment {
  id          String         @id @default(cuid())
  userId      String
  amount      Float
  currency    String
  stripeId    String
  description String
  createdAt   DateTime       @default(now())

  // Strongly typed purpose field: PACKAGE vs STAFF_SEAT
  purpose     PaymentPurpose @default(PACKAGE)

  user        User           @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PaymentPurpose {
  PACKAGE
  STAFF_SEAT
}
