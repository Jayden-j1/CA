// prisma/schema.prisma
//
// Purpose
// -------
// • Auth + billing + course delivery + progress models.
// • Strong ordering guarantees for modules (unique per course).
// • Canonical password-reset token with `expiresAt` only (no legacy `expires`).
//
// Windows-friendly note
// ---------------------
// • Using the Data Proxy engine avoids local native .dll locks on Windows.
// • You can toggle this off if you prefer the default binary engine on CI/Linux.
//
// Pillars
// -------
// ✅ Efficiency    – hot-path indexes (slug, (courseId, order), (userId, moduleId), etc.)
// ✅ Robustness    – explicit relations w/ `onDelete` where it helps data hygiene
// ✅ Simplicity    – JSON questions, simple progress models, single `expiresAt`
// ✅ Ease of mgmt  – clear comments + obvious schema
// ✅ Security      – no extra PII; auth models as expected
//
// ─────────────────────────────────────────────────────────────────────────────
// SYNC NOTE (IMPORTANT):
// Your application and Studio read `User.hasPaid`, `User.packageType`,
// `User.isActive`, and `User.mustChangePassword`. This schema already
// defines those fields correctly. If you see runtime errors like
// “column `User.hasPaid` does not exist”, it means the DATABASE is
// behind the schema. Fix by running a migration (see commands below).
// ─────────────────────────────────────────────────────────────────────────────

// -------------------------
// ⚙️ Generator
// -------------------------
// Pure JS client engine (no native binaries) – helpful on Windows.
// If you later prefer native binaries (e.g., CI on Linux), remove `engineType = "dataproxy"`
// and ensure you *don't* set PRISMA_CLIENT_ENGINE_TYPE=dataproxy in .env.
generator client {
  provider   = "prisma-client-js"
  engineType = "dataproxy"
}

// -------------------------
// 🔗 Datasource
// -------------------------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------
// 👤 Auth models (standard)
// -------------------------
model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  emailVerified         DateTime?
  image                 String?

  // Billing/plan fields used by UI + backend
  hasPaid               Boolean   @default(false)
  packageType           String?   @default("individual")

  // 🔐 Bcrypt-hashed password (NEVER plaintext). Stored in DB column "password".
  hashedPassword        String?   @map("password")

  // Role: USER | BUSINESS_OWNER | ADMIN (string for flexibility)
  role                  String    @default("USER")

  // If the user belongs to a Business (owner or staff), this is set.
  businessId            String?

  // ✅ Account flags
  isActive              Boolean   @default(true)   // soft-delete flag
  mustChangePassword    Boolean   @default(false)  // force password update on first login

  // 📅 Timestamps
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // 🔗 Relations
  accounts              Account[]
  ownedBusiness         Business? @relation("BusinessOwner")
  payments              Payment[]
  sessions              Session[]
  business              Business? @relation(fields: [businessId], references: [id], onDelete: SetNull)
  passwordResetTokens   PasswordResetToken[]

  // Course relations
  courseProgress        UserCourseProgress[]
  moduleProgress        UserModuleProgress[]
}

model Business {
  id          String   @id @default(cuid())
  name        String

  // INTERNAL unique handle used by the system (slug + short suffix).
  // Example: "acme-pty-ltd-a1b2c3". This must remain unique for routing/joins/etc.
  domain      String   @unique

  // NEW (display/enforcement only): the real email domain the org uses, e.g. "example.com".
  // We do NOT force uniqueness here (two orgs could use the same public domain).
  // The UI for "Add staff" should reference this field to render
  // "Only emails from @${emailDomain} are allowed".
  emailDomain String?

  // Business owner userId must be unique: one business per owner.
  ownerId     String   @unique
  createdAt   DateTime @default(now())

  // 🔗 Relations
  owner       User     @relation("BusinessOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  users       User[]

  @@index([domain])
  @@index([emailDomain])
}

model Payment {
  id          String         @id @default(cuid())
  userId      String
  amount      Float
  currency    String
  stripeId    String         @unique
  description String
  createdAt   DateTime       @default(now())

  // Strongly typed purpose field: PACKAGE vs STAFF_SEAT
  purpose     PaymentPurpose @default(PACKAGE)

  // 🔗 Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  // 🔗 Relations
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  // 🔗 Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

// ✅ Token model for forgot-password flow (canonical: expiresAt only)
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique           // random, unguessable
  userId    String                      // FK → User
  expiresAt DateTime                    // when the token expires
  createdAt DateTime @default(now())

  // 🔗 Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

enum PaymentPurpose {
  PACKAGE
  STAFF_SEAT
}

// -------------------------
// 📚 Course delivery models
// -------------------------
model Course {
  id          String         @id @default(cuid())
  slug        String         @unique            // e.g. "cultural-awareness"
  title       String
  summary     String?
  coverImage  String?
  isPublished Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  modules     CourseModule[]
  progress    UserCourseProgress[]

  @@index([isPublished, updatedAt])          // list published courses quickly
}

model CourseModule {
  id              String     @id @default(cuid())
  courseId        String
  order           Int                              // stable ordering within a course, starts at 1
  title           String
  description     String?
  videoUrl        String?                          // hosted video (Vercel Blob, Vimeo, Wistia, S3, etc.)
  durationSeconds Int?
  isPublished     Boolean    @default(false)
  content         Json?                            // optional rich text/markdown AST or Portable Text
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  course          Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quiz            Quiz?
  userProgress    UserModuleProgress[]

  @@index([courseId, order])
  @@unique([courseId, order])                      // enforce unique order per course
  @@index([courseId, isPublished, order])          // render modules in order for a published course
}

model Quiz {
  id           String        @id @default(cuid())
  moduleId     String        @unique               // 1:1 with module (simple)
  title        String?
  questions    Json                                // quiz stored as JSON for simplicity (array of Qs)
  passingScore Int?                                 // optional min % or min correct to pass
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  module       CourseModule  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

// Per-user course summary progress (fast to read on dashboards)
model UserCourseProgress {
  id                 String     @id @default(cuid())
  userId             String
  courseId           String
  completedModuleIds String[]                        // Postgres text[]
  lastModuleId       String?
  percent            Int?                            // 0..100 (computed server-side, cached)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relations
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  course             Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId, updatedAt])
}

// Per-user per-module progress (granular)
model UserModuleProgress {
  id         String       @id @default(cuid())
  userId     String
  moduleId   String
  completed  Boolean      @default(false)          // watched + (quiz pass if required)
  quizScore  Int?                                  // last score (0..100) if a quiz exists
  updatedAt  DateTime     @updatedAt
  createdAt  DateTime     @default(now())

  // Relations
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  module     CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@index([moduleId])
  @@index([userId, updatedAt])
}
