// prisma/schema.prisma
//
// Purpose:
// - Existing auth/billing models remain unchanged.
// - ADD course delivery models (Course, CourseModule, Quiz) and progress tracking
//   (UserCourseProgress, UserModuleProgress) with clear, minimal relations.
// - Keep it simple, scalable, and easy to extend later.
// - ‚úÖ Updated to use Prisma Data Proxy engine to avoid binary .dll locks on Windows.
//
// Design notes:
// - Module-level videoUrl covers your initial video needs (hosted on your CDN/Vimeo/Wistia).
// - Quiz questions stored as JSON to ship fast now; easy to migrate to relational later.
// - Course progress tracked at BOTH module level (granular, quizScore) and course level
//   (completedModuleIds[], percent). This gives flexible, cheap reads for dashboards.
// - Stable ordering via CourseModule.order with unique constraint per course.
//
// Pillars:
// - Efficiency: indices/uniques on hot paths (slug, (courseId, order), (userId, moduleId)).
// - Robustness: explicit relations, unique constraints to avoid duplicates.
// - Simplicity: JSON for questions, a single progress upsert path.
// - Ease of management: comments + obvious fields; minimal surprises.
// - Security: no PII added, all access enforced in API.

// -------------------------
// ‚öôÔ∏è Generator Configuration
// -------------------------
// Using Data Proxy engine avoids native binary locks on Windows (no .dlls).
// Set PRISMA_CLIENT_ENGINE_TYPE=dataproxy in .env to activate this mode.
generator client {
  provider   = "prisma-client-js"

  // ‚úÖ To avoid Windows .dll lock errors, we switch to the Data Proxy engine.
  // This engine is pure JS (no native binaries).
  // You can toggle back to binary mode by changing this to "binary" if needed on Linux/CI.
  engineType = "dataproxy"
}


// -------------------------
// üîó Database Connection
// -------------------------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------
// EXISTING MODELS (unchanged)
// -------------------------

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?

  // üîê Bcrypt-hashed password (NEVER plaintext)
  hashedPassword String?   @map("password")

  // Role: USER | BUSINESS_OWNER | ADMIN
  role           String    @default("USER")

  businessId     String?

  // ‚úÖ Account flags
  isActive           Boolean @default(true)   // soft-delete flag
  mustChangePassword Boolean @default(false)  // force password update on first login

  // üìÖ Timestamps
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // üîó Relations
  accounts       Account[]
  ownedBusiness  Business? @relation("BusinessOwner")
  payments       Payment[]
  sessions       Session[]
  business       Business? @relation(fields: [businessId], references: [id])
  passwordResetTokens PasswordResetToken[]

  // NEW relations
  courseProgress  UserCourseProgress[]
  moduleProgress  UserModuleProgress[]
}

model Business {
  id        String   @id @default(cuid())
  name      String
  domain    String   @unique
  ownerId   String   @unique
  createdAt DateTime @default(now())

  // üîó Relations
  owner     User     @relation("BusinessOwner", fields: [ownerId], references: [id])
  users     User[]
}

model Payment {
  id          String         @id @default(cuid())
  userId      String
  amount      Float
  currency    String
  stripeId    String         @unique
  description String
  createdAt   DateTime       @default(now())

  // Strongly typed purpose field: PACKAGE vs STAFF_SEAT
  purpose     PaymentPurpose @default(PACKAGE)

  // üîó Relations
  user        User           @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  // üîó Relations
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  // üîó Relations
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ‚úÖ Token model for forgot-password flow
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique        // random, unguessable
  userId    String                   // FK ‚Üí User
  expiresAt DateTime                 // when the token expires
  createdAt DateTime @default(now())

  // üîó Relations
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum PaymentPurpose {
  PACKAGE
  STAFF_SEAT
}

// -------------------------
// NEW COURSE MODELS
// -------------------------

model Course {
  id          String         @id @default(cuid())
  slug        String         @unique              // human-friendly stable identifier, e.g. "cultural-awareness-basics"
  title       String
  summary     String?
  coverImage  String?
  isPublished Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  modules     CourseModule[]
  progress    UserCourseProgress[]
}

model CourseModule {
  id              String     @id @default(cuid())
  courseId        String
  order           Int                                // stable ordering within a course, starts at 1
  title           String
  description     String?
  videoUrl        String?                            // your hosted video (Vercel Blob, Vimeo, Wistia, S3)
  durationSeconds Int?
  isPublished     Boolean    @default(false)
  content         Json?                              // optional rich text/markdown AST, future-friendly
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  course          Course     @relation(fields: [courseId], references: [id])
  quiz            Quiz?
  userProgress    UserModuleProgress[]

  @@index([courseId, order])
  @@unique([courseId, order])                        // enforce unique order per course
}

model Quiz {
  id           String        @id @default(cuid())
  moduleId     String        @unique                 // 1:1 with module (simple)
  title        String?
  questions    Json                                    // quiz stored as JSON for simplicity
  passingScore Int?                                   // optional min % or min correct for pass
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  module       CourseModule  @relation(fields: [moduleId], references: [id])
}

// Per-user course summary progress (fast to read for dashboards)
model UserCourseProgress {
  id                 String     @id @default(cuid())
  userId             String
  courseId           String
  completedModuleIds String[]                        // Postgres text[]
  lastModuleId       String?
  percent            Int?                            // 0..100 (computed server-side, cached)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relations
  user               User       @relation(fields: [userId], references: [id])
  course             Course     @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
}

// Per-user per-module progress (granular)
model UserModuleProgress {
  id         String       @id @default(cuid())
  userId     String
  moduleId   String
  completed  Boolean      @default(false)          // completed the module (watch + quiz pass if required)
  quizScore  Int?                                  // last score (0..100) if a quiz exists
  updatedAt  DateTime     @updatedAt
  createdAt  DateTime     @default(now())

  // Relations
  user       User         @relation(fields: [userId], references: [id])
  module     CourseModule @relation(fields: [moduleId], references: [id])

  @@unique([userId, moduleId])
  @@index([moduleId])
}
