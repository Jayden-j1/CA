// -------------------------------------------------------------------
// Prisma schema for your app
//
// Purpose:
// - Single source of truth for both development (SQLite) and production (Postgres).
// - Uses one schema, switching DB via DATABASE_URL in .env.
//
// Changes in this version:
//  Renamed `password` field â†’ `hashedPassword` for clarity.
//    (No chance of confusing it with plaintext passwords.)
//  Added @map("password") to keep DB column name backwards-compatible.
// -------------------------------------------------------------------

datasource db {
  provider = "sqlite"             // Local dev (SQLite)
  url      = env("DATABASE_URL")  // From .env / Vercel environment
}

generator client {
  provider = "prisma-client-js"   // Generates Prisma Client
}

// -----------------------------
// User model
// -----------------------------
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?

  //   Store bcrypt-hashed password (NOT plaintext)
  //   - Field is `hashedPassword` in Prisma Client
  //   - Column in DB is still `password` (for compatibility)
  hashedPassword String? @map("password")

  // Roles: "USER" | "BUSINESS_OWNER" | "ADMIN"
  role          String     @default("USER")

  businessId    String?
  business      Business?  @relation(fields: [businessId], references: [id])
  ownedBusiness Business?  @relation("BusinessOwner")

  payments      Payment[]
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// -----------------------------
// Business model
// -----------------------------
model Business {
  id        String   @id @default(cuid())
  name      String
  domain    String   @unique
  ownerId   String   @unique
  owner     User     @relation("BusinessOwner", fields: [ownerId], references: [id])
  users     User[]

  createdAt DateTime @default(now())
}

// -----------------------------
// Payment model
// -----------------------------
model Payment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  currency    String
  stripeId    String
  description String
  createdAt   DateTime @default(now())
}

// -----------------------------
// NextAuth tables
// -----------------------------
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
