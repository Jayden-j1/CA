// prisma/schema.prod.prisma
//
// Postgres for production (Vercel). Models identical to dev schema;
// only the datasource provider changes. Keep models in sync with schema.dev.prisma.

datasource db {
  provider = "postgresql"          //  production uses Postgres
  url      = env("DATABASE_URL")   // e.g. "postgresql://USER:PASS@HOST:5432/DB?schema=public"
}

generator client {
  provider = "prisma-client-js"
}

// Models are identical to schema.dev.prisma  â¤µ

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?

  password      String?
  role          String     @default("USER")

  businessId    String?
  business      Business?  @relation(fields: [businessId], references: [id])

  ownedBusiness Business?  @relation("BusinessOwner")

  payments      Payment[]

  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Business {
  id        String   @id @default(cuid())
  name      String
  domain    String   @unique

  ownerId   String   @unique
  owner     User     @relation("BusinessOwner", fields: [ownerId], references: [id])

  users     User[]

  createdAt DateTime @default(now())
}

model Payment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  currency    String
  stripeId    String
  description String
  createdAt   DateTime @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
